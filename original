// The script assumes there is only one PMax campaign and one shared search budget
// Needs daily budget total
// Keep lookback to 30 days (a default setting)
// Needs min and max PMax ratio range
// Needs shared search budget name

function main() {
  const TOTAL_BUDGET = 100;
  const LOOKBACK_DAYS = 30;
  const PMAX_MIN_SHARE = 0.05;
  const PMAX_MAX_SHARE = 0.70;
  const SEARCH_SHARED_BUDGETS = ['Shared Budget'];

  // Fetch stats by campaign type
  let searchPerformance = getPerformanceData('SEARCH', LOOKBACK_DAYS);
  let pmaxPerformance = getPerformanceData('PERFORMANCE_MAX', LOOKBACK_DAYS);

  // Sum stats for account totals
  let totalConvValue = searchPerformance.convValue + pmaxPerformance.convValue;
  let totalCost = searchPerformance.cost + pmaxPerformance.cost;

  // Calculate ROAS
  let totalROAS = calculateROAS({ convValue: totalConvValue, cost: totalCost });
  let searchROAS = calculateROAS(searchPerformance);
  let pmaxROAS = calculateROAS(pmaxPerformance);

  // Log performance metrics with ROAS for debugging
  Logger.log('Search Performance: Cost: $' + searchPerformance.cost.toFixed(2) + ', Conv. Value: $' + searchPerformance.convValue.toFixed(2) + ', ROAS: ' + searchROAS.toFixed(2));
  Logger.log('PMax Performance: Cost: $' + pmaxPerformance.cost.toFixed(2) + ', Conv. Value: $' + pmaxPerformance.convValue.toFixed(2) + ', ROAS: ' + pmaxROAS.toFixed(2));
  Logger.log('Total Performance Metrics: Cost: $' + totalCost.toFixed(2) + ', Conv. Value: $' + totalConvValue.toFixed(2) + ', ROAS: ' + totalROAS.toFixed(2));

  // Calculate budget shares based on relative performance
  let searchBudgetShare = (searchROAS / totalROAS) * (searchPerformance.cost / totalCost);
  let pmaxBudgetShare = (pmaxROAS / totalROAS) * (pmaxPerformance.cost / totalCost);

  // Normalize shares to ensure they sum to 1
  let totalShare = searchBudgetShare + pmaxBudgetShare;

  if (totalShare <= 0) {
    Logger.log('Warning: Total share is zero or negative, exiting script. No budget allocation will be made.');
    return; // Exit the script without making any changes
  } else {
    searchBudgetShare /= totalShare;
    pmaxBudgetShare /= totalShare;
    Logger.log('Normalized Shares - Search Share: ' + (searchBudgetShare * 100).toFixed(2) + '%, PMax Share: ' + (pmaxBudgetShare * 100).toFixed(2) + '%');
  }

  // Apply constraints to PMax budget share
  if (pmaxBudgetShare < PMAX_MIN_SHARE) {
    pmaxBudgetShare = PMAX_MIN_SHARE;
    searchBudgetShare = 1 - PMAX_MIN_SHARE;
  } else if (pmaxBudgetShare > PMAX_MAX_SHARE) {
    pmaxBudgetShare = PMAX_MAX_SHARE;
    searchBudgetShare = 1 - PMAX_MAX_SHARE;
  }

  // Verify final shares sum to 1
  let finalTotalShare = searchBudgetShare + pmaxBudgetShare;
  if (Math.abs(finalTotalShare - 1) > 0.0001) {  // Allow for small floating point differences
    Logger.log('Warning: Final shares do not sum to 1. Adjusting...');
    searchBudgetShare = 1 - pmaxBudgetShare;
  }

  Logger.log('\nBudget Share Adjustments:');
  Logger.log('Final PMax Share: ' + (pmaxBudgetShare * 100).toFixed(2) + '%');
  Logger.log('Final Search Share: ' + (searchBudgetShare * 100).toFixed(2) + '%');

  let searchBudget = TOTAL_BUDGET * searchBudgetShare;
  let pmaxBudget = TOTAL_BUDGET * pmaxBudgetShare;

  updateSearchSharedBudgets(SEARCH_SHARED_BUDGETS, searchBudget);
  updatePMaxCampaignBudgets(pmaxBudget);

  // Detailed logging of final budget allocation
  Logger.log('\nFinal Budget Allocation:');
  Logger.log('Total Daily Budget: $' + TOTAL_BUDGET.toFixed(2));
  Logger.log('Search (Shared): $' + searchBudget.toFixed(2) + ' (' + (searchBudgetShare * 100).toFixed(2) + '%)');
  Logger.log('PMax: $' + pmaxBudget.toFixed(2) + ' (' + (pmaxBudgetShare * 100).toFixed(2) + '%)');
}

function calculateROAS(performance) {
  return performance.cost > 0 ? performance.convValue / performance.cost : 0;
}

function getPerformanceData(campaignType, days) {
  let query = AdsApp.report(
    "SELECT CampaignName, Cost, ConversionValue " +
    "FROM CAMPAIGN_PERFORMANCE_REPORT " +
    "WHERE AdvertisingChannelType = '" + campaignType + "' " +
    "DURING LAST_" + days + "_DAYS"
  );

  let rows = query.rows();

  if (!rows.hasNext()) {
    Logger.log('No data found for campaign type: ' + campaignType);
    return { cost: 0, convValue: 0 }; // Return zero values if no data found
  }

  let totalCost = 0;
  let totalConvValue = 0;

  while (rows.hasNext()) {
    let row = rows.next();
    
    // Remove commas and parse values correctly
    let costValue = parseFloat(row['Cost'].replace(/,/g, '')) || 0;
    let convValue = parseFloat(row['ConversionValue'].replace(/,/g, '')) || 0;

    totalCost += costValue; 
    totalConvValue += convValue; 
  }

  return {cost: totalCost, convValue: totalConvValue};
}

function updateSearchSharedBudgets(sharedBudgetNames, totalSearchBudget) {
  let budgetPerSharedBudget = sharedBudgetNames.length > 0 ? totalSearchBudget / sharedBudgetNames.length : 0;

  sharedBudgetNames.forEach(function(budgetName) {
    let sharedBudgets = AdsApp.budgets()
      .withCondition("BudgetName = '" + budgetName + "'")
      .get();

    if (sharedBudgets.hasNext()) {
      let sharedBudget = sharedBudgets.next();
      try {
        sharedBudget.setAmount(budgetPerSharedBudget);
        Logger.log('Successfully updated shared budget: ' + budgetName);
      } catch (e) {
        Logger.log('Error setting shared budget ' + budgetName + ': ' + e.message);
      }
    } else {
      Logger.log('Shared budget not found: ' + budgetName);
    }
  });
}

function updatePMaxCampaignBudgets(pmaxBudget) {
  let pmaxCampaigns = AdsApp.performanceMaxCampaigns()
    .withCondition("campaign.status = ENABLED")
    .get();

  let campaignCount = pmaxCampaigns.totalNumEntities();

  if (campaignCount === 0) {
    Logger.log('No active PMax campaigns found to update budgets.');
    return; // Exit if no campaigns are found
  }

  let budgetPerCampaign = pmaxBudget / campaignCount;

  while (pmaxCampaigns.hasNext()) {
    let campaign = pmaxCampaigns.next();
    let budget = campaign.getBudget();
    
    if (budget) {
      try {
        budget.setAmount(budgetPerCampaign);
        Logger.log('Successfully updated budget for PMax campaign: ' + campaign.getName());
      } catch (e) {
        Logger.log('Error setting budget for PMax campaign ' + campaign.getName() + ': ' + e.message);
      }
    } else {
      Logger.log('Unable to get budget for PMax campaign: ' + campaign.getName());
    }
  }
}
